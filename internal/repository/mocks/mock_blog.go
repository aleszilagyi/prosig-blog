// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aleszilagyi/prosig-blog/internal/repository (interfaces: BlogRepository)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/mock_blog.go -package mocks github.com/aleszilagyi/prosig-blog/internal/repository BlogRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	response "github.com/aleszilagyi/prosig-blog/internal/response"
	gomock "go.uber.org/mock/gomock"
)

// MockBlogRepository is a mock of BlogRepository interface.
type MockBlogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlogRepositoryMockRecorder
	isgomock struct{}
}

// MockBlogRepositoryMockRecorder is the mock recorder for MockBlogRepository.
type MockBlogRepositoryMockRecorder struct {
	mock *MockBlogRepository
}

// NewMockBlogRepository creates a new mock instance.
func NewMockBlogRepository(ctrl *gomock.Controller) *MockBlogRepository {
	mock := &MockBlogRepository{ctrl: ctrl}
	mock.recorder = &MockBlogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogRepository) EXPECT() *MockBlogRepositoryMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockBlogRepository) AddComment(ctx context.Context, blogPostID int, content string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, blogPostID, content)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockBlogRepositoryMockRecorder) AddComment(ctx, blogPostID, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockBlogRepository)(nil).AddComment), ctx, blogPostID, content)
}

// CreatePost mocks base method.
func (m *MockBlogRepository) CreatePost(ctx context.Context, title, content string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, title, content)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockBlogRepositoryMockRecorder) CreatePost(ctx, title, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockBlogRepository)(nil).CreatePost), ctx, title, content)
}

// GetAllPostsWithCommentCount mocks base method.
func (m *MockBlogRepository) GetAllPostsWithCommentCount(ctx context.Context) ([]*response.PostWithCommentCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPostsWithCommentCount", ctx)
	ret0, _ := ret[0].([]*response.PostWithCommentCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPostsWithCommentCount indicates an expected call of GetAllPostsWithCommentCount.
func (mr *MockBlogRepositoryMockRecorder) GetAllPostsWithCommentCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPostsWithCommentCount", reflect.TypeOf((*MockBlogRepository)(nil).GetAllPostsWithCommentCount), ctx)
}

// GetPostWithComments mocks base method.
func (m *MockBlogRepository) GetPostWithComments(ctx context.Context, id int) (*response.PostWithCommentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostWithComments", ctx, id)
	ret0, _ := ret[0].(*response.PostWithCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostWithComments indicates an expected call of GetPostWithComments.
func (mr *MockBlogRepositoryMockRecorder) GetPostWithComments(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostWithComments", reflect.TypeOf((*MockBlogRepository)(nil).GetPostWithComments), ctx, id)
}
